unit TestCaseNationalId;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Emetra.Person.NationalIds, System.SysUtils;

type
  // Test methods for class TNorwegianNationalId

  TestTNorwegianNationalId = class(TTestCase)
  strict private
    FNorwegianNationalId: TNorwegianNationalId;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGenerate;
    procedure TestGenerate1;
    procedure TestGenderId;
    procedure TestParse;
    procedure TestValid;
    procedure TestPossibleDNumber;
  end;

implementation

procedure TestTNorwegianNationalId.SetUp;
begin
  FNorwegianNationalId := TNorwegianNationalId.Create;
end;

procedure TestTNorwegianNationalId.TearDown;
begin
  FNorwegianNationalId.Free;
  FNorwegianNationalId := nil;
end;

procedure TestTNorwegianNationalId.TestGenerate;
var
  ReturnValue: string;
begin
  ReturnValue := FNorwegianNationalId.Generate;
  // TODO: Validate method results
end;

procedure TestTNorwegianNationalId.TestGenerate1;
var
  ReturnValue: string;
  ASeed: Integer;
  AGenderId: Integer;
  ADOB: TDateTime;
begin
  // TODO: Setup method call parameters
  ReturnValue := FNorwegianNationalId.Generate(ADOB, AGenderId, ASeed);
  // TODO: Validate method results
end;

procedure TestTNorwegianNationalId.TestGenderId;
var
  ReturnValue: Integer;
  s: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FNorwegianNationalId.GenderId(s);
  // TODO: Validate method results
end;

procedure TestTNorwegianNationalId.TestParse;
var
  ReturnValue: Boolean;
  ANumber: Integer;
  AGenderId: Integer;
  ADOB: TDateTime;
  s: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FNorwegianNationalId.Parse(s, ADOB, AGenderId, ANumber);
  // TODO: Validate method results
end;

procedure TestTNorwegianNationalId.TestValid;
begin
  CheckFalse( FNorwegianNationalId.Valid( '01427017212'), 'This is not a valid number' );;
end;

procedure TestTNorwegianNationalId.TestPossibleDNumber;
var
  ReturnValue: Boolean;
  s: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FNorwegianNationalId.PossibleDNumber(s);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTNorwegianNationalId.Suite);
end.

